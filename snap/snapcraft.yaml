name: edgex-core-snap
version: '0.2.1+barca-1'
summary: Provides a full set of Edgex Foundry core microservices.
description: |
 This snap provides a full set of Edgxe Foundry core microservices,
 This snap is currently based on the 'Barcalona' release of EdgeX,
 where most of core microservices are written in Java.  The notable
 exception is consul, which is the core configuration microservice.
 This snap includes a shared Zulu JRE and Go runtime, as consul
 requires a later version of Go than that provided by Ubuntu 16.04 LTS.

grade: devel # must be 'stable' to release into candidate/stable channels
confinement: devmode # use 'strict' once you have the right plugs and slots
#grade: stable
#confinement: strict
#
# TODO: still a few bugs to work out for confinement;
# seems that there are apparmor denials being generated
# for open calls to /var/lib/snapd/void/. This directory
# seems to include all of the individual log files for
# each EdgeX micro service.

apps:
  consul:
    command: bin/start-consul.sh
    # TODO: add stop-command
    plugs: [network, network-bind]
  core-config-seed:
    command: bin/start-config-seed.sh
    plugs: [network, network-bind]
  start-edgex:
    command: bin/start-edgex.sh
    plugs: [network, network-bind]
  mongo:
    command: bin/mongo
    plugs: [network]
  mongod:
    command: mongo/launch-edgex-mongo.sh
    plugs: [network, network-bind]
  mongostat:
    command: bin/mongostat
    plugs: [network]
  mongodump:
    command: bin/mongodump
    plugs: [network]
  consul-cli:
    command: bin/consul
    plugs: [network, network-bind]

parts:
  curl:
    plugin: nil
    stage-packages:
      - curl
  # This part and its associated plugin were taken from the docker snap:
  #
  # https://github.com/docker/docker-snap
  #
  # TODO - this approach is less than ideal with respect to security, as
  # it CVEs are not automatically handled. At some point, this part should
  # be re-worked to pull the go binary from the bionic Debian package.
  #
  go:
    plugin: gobuild
    source: https://storage.googleapis.com/golang/go1.9.2.src.tar.gz
    # source: ./go1.9.2.src.tar.gz
    source-type: tar
    # NOTE - both the jre & go install LICENSE to root-dir of the snap
    # which breaks when 'stage' runs.  The only workaround so far is
    # is to not stage these files.  This needs a better solution long-term.
    stage:
      - -LICENSE
    prime:
      - -*
    build-packages:
      - golang-go
      - rsync
      - build-essential
      - netbase
      - python3-pyelftools

  # This part and its associated plugin (x-zulu-jre.py) were taken from
  # the openhab snap:
  #
  # https://github.com/kubiko/openhab-snap
  jre:
    plugin: zulu-jre
    # zulu supported architectures(armhf, arm64,  amd64) are already handled by plugin itself
    # define here overide for pluging's defaults, or to add additional architectures
    # example overide:
    # zulu:
    #     amd64: https://www.azul.com/downloads/zulu/zdk-8-ga-linux_x64.tar.gz

  consul:
    plugin: shell
    source: git@github.com:hashicorp/consul.git
    # source: ./consul
    source-tag: v0.7.3
    prepare: git apply $SNAPCRAFT_STAGE/0001-Link-all-dependencies-in-vendor-folder-to-the-custom.patch
    shell: bash
    shell-flags: ['-eux', '-o', 'pipefail']
    shell-command: |
      export GOROOT="$SNAPDIR/parts/go/install"
      export PATH="$GOROOT/bin:$PATH"

      export XC_ARCH="amd64"
      export XC_OS="linux"

      go version

      mkdir -p .gopath/src/github.com/hashicorp
      export GOPATH="$PWD/.gopath"
      export PATH="$GOPATH/bin:$PATH"
      ln -s "$PWD" .gopath/src/github.com/hashicorp/consul

      pushd .gopath/src/github.com/hashicorp/consul
      make bin
      popd

      consulBin='.gopath/src/github.com/hashicorp/consul/pkg/linux_amd64/consul'
      "$consulBin" -v
      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T "$(readlink -f "$consulBin")" "$SNAPCRAFT_PART_INSTALL/bin/consul"
    after:
      - go
      - patch
    build-packages:
      - make
  patch:
    source: patches
    plugin: dump
    prime:
      - -*
  config-seed:
    source: git@github.com:edgexfoundry/core-config-seed.git
    source-branch: barcelona
    plugin: maven
    install: |
      echo "Installing config files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX core-config-seed docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/config-seed"
      mv "$SNAPCRAFT_PART_INSTALL/jar/core-config-seed-0.2.1-SNAPSHOT.jar" \
         "$SNAPCRAFT_PART_INSTALL/jar/config-seed/core-config-seed.jar"

      install -d "$SNAPCRAFT_PART_INSTALL/jar/config-seed/config"
      for i in `ls ./config`; do
        install -d "$SNAPCRAFT_PART_INSTALL/jar/config-seed/config/$i"; done
      for i in `ls ./config`; do
        cp "./config/$i/application.properties" \
           "$SNAPCRAFT_PART_INSTALL/jar/config-seed/config/$i/"; done
    build-packages:
      - ca-certificates-java
    prime:
      - -etc/fonts/*
  config-common:
    plugin: dump
    source: .
    stage:
      - bin/start-consul.sh
      - bin/start-config-seed.sh
      - bin/start-edgex.sh
      - config/edgex-services-env
  mongodb:
   source: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.4.10.tgz
   plugin: dump
   stage-packages:
   - libssl1.0.0
   stage:
     - -bin/bsondump
     - -bin/mongoexport
     - -bin/mongofiles
     - -bin/mongoimport
     - -bin/mongooplog
     - -bin/mongoperf
     - -bin/mongoreplay
     - -bin/mongorestore
     - -bin/mongos
     - -bin/mongotop
  mongo-config:
    source: git@github.com:edgexfoundry/docker-edgex-mongo.git
    plugin: dump
    # NOTE - both the mongo-config & go install README.md to root-dir of the snap
    # which breaks when 'stage' runs.  The only workaround so far is
    # is to not stage these files.  This needs a better solution long-term.
    stage:
      - -README.md
      - -Dockerfile*
    install: |
      echo "Installing mongo-config files"
      echo "DIR=`pwd`"
      echo "SNAPCRAFT_PART_INSTALL=$SNAPCRAFT_PART_INSTALL"
      install -d "$SNAPCRAFT_PART_INSTALL/mongo"
      cat ./launch-edgex-mongo.sh | \
        sed -e s/\$SLEEP_TIME_BEFORE_CONFIG/10/ \
            -e s:mongod:mongod\ --dbpath\ \$SNAP_DATA/mongo/db: \
            -e '/wait/ d' \
            -e s:/edgex/mongo/config/:\$SNAP/mongo/: > \
         "$SNAPCRAFT_PART_INSTALL/mongo/launch-edgex-mongo.sh"
      mv "$SNAPCRAFT_PART_INSTALL/init_mongo.js" \
         "$SNAPCRAFT_PART_INSTALL/mongo/init_mongo.js"
      chmod 755 "$SNAPCRAFT_PART_INSTALL/mongo/launch-edgex-mongo.sh"
  core-data:
    source: git@github.com:edgexfoundry/core-data.git
    source-branch: barcelona
    plugin: maven
    install: |
      echo "Installing core-data files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX core-data docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/core-data"
      mv "$SNAPCRAFT_PART_INSTALL/jar/core-data-0.2.1-SNAPSHOT.jar" \
         "$SNAPCRAFT_PART_INSTALL/jar/core-data/core-data.jar"
    prime:
      - -etc/fonts/*
  support-logging:
    source: git@github.com:edgexfoundry/support-logging.git
    source-branch: barcelona
    plugin: maven
    install: |
      echo "Installing support-logging files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX support-logging docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/support-logging"
      mv "$SNAPCRAFT_PART_INSTALL/jar/support-logging-0.2.1-SNAPSHOT.jar" \
         "$SNAPCRAFT_PART_INSTALL/jar/support-logging/support-logging.jar"
    prime:
      - -etc/fonts/*
  support-notifications:
    source: git@github.com:edgexfoundry/support-notifications.git
    source-branch: barcelona
    plugin: maven
    install: |
      echo "Installing support-notifications files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX support-notifications docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/support-notifications"
      mv "$SNAPCRAFT_PART_INSTALL/jar/support-notifications-0.2.1-SNAPSHOT.jar" \
         "$SNAPCRAFT_PART_INSTALL/jar/support-notifications/support-notifications.jar"
    prime:
      - -etc/fonts/*
  core-metadata:
    source: git@github.com:edgexfoundry/core-metadata.git
    source-branch: barcelona
    plugin: maven
    install: |
      echo "Installing core-metadata files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX core-metadata docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/core-metadata"
      mv "$SNAPCRAFT_PART_INSTALL/jar/core-metadata-0.2.1-SNAPSHOT.jar" \
         "$SNAPCRAFT_PART_INSTALL/jar/core-metadata/core-metadata.jar"
    prime:
      - -etc/fonts/*
  core-command:
    source: git@github.com:edgexfoundry/core-command.git
    source-branch: barcelona
    plugin: maven
    install: |
      echo "Installing core-command files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX core-command docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/core-command"
      mv "$SNAPCRAFT_PART_INSTALL/jar/core-command-0.2.1-SNAPSHOT.jar" \
         "$SNAPCRAFT_PART_INSTALL/jar/core-command/core-command.jar"
    prime:
      - -etc/fonts/*
  support-scheduler:
    source: git@github.com:edgexfoundry/support-scheduler.git
    source-branch: barcelona
    plugin: maven
    install: |
      echo "Installing support-scheduler files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX support-scheduler docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/support-scheduler"
      mv "$SNAPCRAFT_PART_INSTALL/jar/support-scheduler-0.2.1-SNAPSHOT.jar" \
         "$SNAPCRAFT_PART_INSTALL/jar/support-scheduler/support-scheduler.jar"
    prime:
      - -etc/fonts/*
  export-client:
    source: git@github.com:edgexfoundry/export-client.git
    source-branch: barcelona
    plugin: maven
    install: |
      echo "Installing export-client files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX export-client docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/export-client"
      mv "$SNAPCRAFT_PART_INSTALL/jar/export-client-0.2.1-SNAPSHOT.jar" \
         "$SNAPCRAFT_PART_INSTALL/jar/export-client/export-client.jar"
    prime:
      - -etc/fonts/*
  export-distro:
    source: git@github.com:edgexfoundry/export-distro.git
    source-branch: barcelona
    plugin: maven
    install: |
      echo "Installing export-distro files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX export-distro docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/export-distro"
      mv "$SNAPCRAFT_PART_INSTALL/jar/export-distro-0.2.1-SNAPSHOT.jar" \
         "$SNAPCRAFT_PART_INSTALL/jar/export-distro/export-distro.jar"
    prime:
      - -etc/fonts/*
  support-rulesengine:
    source: git@github.com:edgexfoundry/support-rulesengine.git
    source-branch: barcelona
    plugin: maven
    install: |
      echo "Installing support-rulesengine files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX support-rulesengine docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/support-rulesengine"
      mv "$SNAPCRAFT_PART_INSTALL/jar/support-rulesengine-0.2.1-SNAPSHOT.jar" \
         "$SNAPCRAFT_PART_INSTALL/jar/support-rulesengine/support-rulesengine.jar"
    prime:
      - -etc/fonts/*
  device-virtual:
    source: git@github.com:edgexfoundry/device-virtual.git
    source-branch: barcelona
    plugin: maven
    install: |
      echo "Installing device-virtual files"

      # The logic following logic is all handled by DockerFile for
      # the EdgeX device-virtual docker image.
      install -d "$SNAPCRAFT_PART_INSTALL/jar/device-virtual"
      install -d "$SNAPCRAFT_PART_INSTALL/jar/device-virtual/bacnet_sample_profiles"
      install -d "$SNAPCRAFT_PART_INSTALL/jar/device-virtual/modbus_sample_profiles"
      mv "$SNAPCRAFT_PART_INSTALL/jar/device-virtual-0.2.1-SNAPSHOT.jar" \
         "$SNAPCRAFT_PART_INSTALL/jar/device-virtual/device-virtual.jar"
      cp ./bacnet_sample_profiles/*.yaml \
         "$SNAPCRAFT_PART_INSTALL/jar/device-virtual/bacnet_sample_profiles/"
      cp ./modbus_sample_profiles/*.yaml \
         "$SNAPCRAFT_PART_INSTALL/jar/device-virtual/modbus_sample_profiles/"
    prime:
      - -etc/fonts/*
